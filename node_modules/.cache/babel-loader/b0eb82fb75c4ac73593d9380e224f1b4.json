{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\nimport { auth, FirebaseTimestamp, db } from \"../../firebase/index\";\nexport const signIn = (email, password) => {\n  return async (dispatch, getState) => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.user;\n        db.collection(\"users\").doc(uid).get().then(snapshot => {\n          const data = snapshot.data();\n          dispatch(signInAction({\n            isSignedIn: ture,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n        });\n      }\n    });\n  };\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    } // createUserWithEmailAndPasswordはfirebaseのアカウントを作るメソッド\n\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialdata = {\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updatad_at: timestamp,\n          username: username\n        }; // createUserWithEmailAndPasswordで作られたアカウント情報を登録する（データベースに登録）\n\n        db.collection(\"users\").doc(uid).set(userInitialdata).then(() => {\n          // 登録が完了したらホームへ行く処理\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/abeshoujirou/Desktop/ec-app-trahack/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","signIn","email","password","dispatch","getState","alert","signInWithEmailAndPassword","then","result","user","uid","collection","doc","get","snapshot","data","isSignedIn","ture","role","username","signUp","confirmPassword","createUserWithEmailAndPassword","timestamp","now","userInitialdata","created_at","updatad_at","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AACA,QAAIH,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAjC,EAAoC;AAClCG,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAEDR,IAAAA,IAAI,CAACS,0BAAL,CAAgCL,KAAhC,EAAuCC,QAAvC,EACGK,IADH,CACQC,MAAM,IAAI;AACd,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACN,cAAMC,GAAG,GAAGD,IAAI,CAACA,IAAjB;AAEAV,QAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgCG,GAAhC,GACGN,IADH,CACQO,QAAQ,IAAI;AAChB,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb;AAEAZ,UAAAA,QAAQ,CAACR,YAAY,CAAC;AACpBqB,YAAAA,UAAU,EAAEC,IADQ;AAEpBC,YAAAA,IAAI,EAAEH,IAAI,CAACG,IAFS;AAGpBR,YAAAA,GAAG,EAAEA,GAHe;AAIpBS,YAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAJK,WAAD,CAAb,CAAR;AAMD,SAVH;AAWD;AACF,KAnBH;AAoBD,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMC,MAAM,GAAG,CAACD,QAAD,EAAWlB,KAAX,EAAkBC,QAAlB,EAA4BmB,eAA5B,KAAgD;AACpE,SAAO,MAAOlB,QAAP,IAAoB;AACzB;AACA,QAAIgB,QAAQ,KAAK,EAAb,IAAmBlB,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDmB,eAAe,KAAK,EAA9E,EAAiF;AAC/EhB,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAIH,QAAQ,KAAKmB,eAAjB,EAAkC;AAChChB,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACD,KAVwB,CAYzB;;;AACA,WAAOR,IAAI,CAACyB,8BAAL,CAAoCrB,KAApC,EAA2CC,QAA3C,EACNK,IADM,CACDC,MAAM,IAAI;AACd,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACN,cAAMC,GAAG,GAAGD,IAAI,CAACC,GAAjB;AACA,cAAMa,SAAS,GAAGzB,iBAAiB,CAAC0B,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACtBC,UAAAA,UAAU,EAAEH,SADU;AAEtBtB,UAAAA,KAAK,EAAEA,KAFe;AAGtBiB,UAAAA,IAAI,EAAE,UAHgB;AAItBR,UAAAA,GAAG,EAAEA,GAJiB;AAKtBiB,UAAAA,UAAU,EAAEJ,SALU;AAMtBJ,UAAAA,QAAQ,EAAEA;AANY,SAAxB,CAJM,CAYN;;AACApB,QAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,GAA3B,EAAgCkB,GAAhC,CAAoCH,eAApC,EACGlB,IADH,CACQ,MAAM;AACV;AACAJ,UAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SAJH;AAKD;AACF,KAvBM,CAAP;AAwBD,GArCD;AAsCD,CAvCM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from \"connected-react-router\"\nimport {auth, FirebaseTimestamp, db} from \"../../firebase/index\"\n\nexport const signIn = (email, password) => {\n  return async (dispatch, getState) => {\n    // Validation\n    if (email === \"\" || password === \"\"){\n      alert(\"必須項目が未入力です\")\n      return false\n    }\n\n    auth.signInWithEmailAndPassword(email, password)\n      .then(result => {\n        const user = result.user\n\n        if(user){\n          const uid = user.user\n\n          db.collection(\"users\").doc(uid).get()\n            .then(snapshot => {\n              const data = snapshot.data()\n\n              dispatch(signInAction({\n                isSignedIn: ture,\n                role: data.role,\n                uid: uid,\n                username: data.username\n              }))\n            })\n        }\n      })\n  }\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\"){\n      alert(\"必須項目が未入力です\")\n      return false\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\")\n      return false\n    }\n\n    // createUserWithEmailAndPasswordはfirebaseのアカウントを作るメソッド\n    return auth.createUserWithEmailAndPassword(email, password)\n    .then(result => {\n      const user = result.user\n\n      if(user){\n        const uid = user.uid\n        const timestamp = FirebaseTimestamp.now()\n\n        const userInitialdata = {\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updatad_at: timestamp,\n          username: username\n        }\n        // createUserWithEmailAndPasswordで作られたアカウント情報を登録する（データベースに登録）\n        db.collection(\"users\").doc(uid).set(userInitialdata)\n          .then(() => {\n            // 登録が完了したらホームへ行く処理\n            dispatch(push(\"/\"))\n          })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}