{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\nimport { auth, FirebaseTimestamp, db } from \"../../firebase/index\";\nexport const signIn = (email, password) => {\n  return async (dispatch, getState) => {\n    // getState()はreduxのメソッド\n    //　現在のreduxのstate情報を取ってくる\n    const state = getState();\n    const isSignedIn = state.users.isSignedIn;\n\n    if (!isSignedIn) {\n      const url = \"https://api.github.com/users/ShojiroAbe\";\n      const response = await fetch(url).then(res => res.json()).catch(() => null);\n      const username = response.login;\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: \"00001\",\n        username: username\n      }));\n      dispatch(push(\"/\"));\n    }\n  };\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\");\n      return false;\n    } // createUserWithEmailAndPasswordはfirebaseのアカウントを作るメソッド\n\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialDate = {\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        }; // createUserWithEmailAndPasswordで作られたアカウント情報を登録する（データベースに登録）\n\n        db.collection(\"users\").doc(uid).set(userInitialDate).then(() => {\n          // 登録が完了したらホームへ行く処理\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/abeshoujirou/Desktop/ec-app-trahack/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","signIn","email","password","dispatch","getState","state","isSignedIn","users","url","response","fetch","then","res","json","catch","username","login","uid","signUp","confirmPassword","alert","createUserWithEmailAndPassword","result","user","timestamp","now","userInitialDate","created_at","role","updated_at","collection","doc","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AACA;AACA,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYD,UAA/B;;AAEA,QAAI,CAACA,UAAL,EAAiB;AACf,YAAME,GAAG,GAAE,yCAAX;AAEA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CACNG,IADM,CACDC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EADJ,EAENC,KAFM,CAEA,MAAI,IAFJ,CAAvB;AAIA,YAAMC,QAAQ,GAAGN,QAAQ,CAACO,KAA1B;AAEAb,MAAAA,QAAQ,CAACR,YAAY,CAAC;AACpBW,QAAAA,UAAU,EAAE,IADQ;AAEpBW,QAAAA,GAAG,EAAE,OAFe;AAGpBF,QAAAA,QAAQ,EAAEA;AAHU,OAAD,CAAb,CAAR;AAKAZ,MAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACD;AACF,GAtBD;AAuBD,CAxBM;AA0BP,OAAO,MAAMsB,MAAM,GAAG,CAACH,QAAD,EAAWd,KAAX,EAAkBC,QAAlB,EAA4BiB,eAA5B,KAAgD;AACpE,SAAO,MAAOhB,QAAP,IAAoB;AACzB;AACA,QAAIY,QAAQ,KAAK,EAAb,IAAmBd,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAhD,IAAsDiB,eAAe,KAAK,EAA9E,EAAiF;AAC/EC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAIlB,QAAQ,KAAKiB,eAAjB,EAAkC;AAChCC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA,aAAO,KAAP;AACD,KAVwB,CAYzB;;;AACA,WAAOvB,IAAI,CAACwB,8BAAL,CAAoCpB,KAApC,EAA2CC,QAA3C,EACNS,IADM,CACDW,MAAM,IAAI;AACd,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAGA,IAAH,EAAQ;AACN,cAAMN,GAAG,GAAGM,IAAI,CAACN,GAAjB;AACA,cAAMO,SAAS,GAAG1B,iBAAiB,CAAC2B,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACtBC,UAAAA,UAAU,EAAEH,SADU;AAEtBvB,UAAAA,KAAK,EAAEA,KAFe;AAGtB2B,UAAAA,IAAI,EAAE,UAHgB;AAItBX,UAAAA,GAAG,EAAEA,GAJiB;AAKtBY,UAAAA,UAAU,EAAEL,SALU;AAMtBT,UAAAA,QAAQ,EAAEA;AANY,SAAxB,CAJM,CAYN;;AACAhB,QAAAA,EAAE,CAAC+B,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2Bd,GAA3B,EAAgCe,GAAhC,CAAoCN,eAApC,EACGf,IADH,CACQ,MAAM;AACV;AACAR,UAAAA,QAAQ,CAACP,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SAJH;AAKD;AACF,KAvBM,CAAP;AAwBD,GArCD;AAsCD,CAvCM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from \"connected-react-router\"\nimport {auth, FirebaseTimestamp, db} from \"../../firebase/index\"\n\nexport const signIn = (email, password) => {\n  return async (dispatch, getState) => {\n    // getState()はreduxのメソッド\n    //　現在のreduxのstate情報を取ってくる\n    const state = getState()\n    const isSignedIn = state.users.isSignedIn\n\n    if (!isSignedIn) {\n      const url =\"https://api.github.com/users/ShojiroAbe\"\n\n      const response = await fetch(url)\n                      .then(res=>res.json())\n                      .catch(()=>null)\n\n      const username = response.login\n\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: \"00001\",\n        username: username\n      }))\n      dispatch(push(\"/\"))\n    }\n  }\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validation\n    if (username === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\"){\n      alert(\"必須項目が未入力です\")\n      return false\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください。\")\n      return false\n    }\n\n    // createUserWithEmailAndPasswordはfirebaseのアカウントを作るメソッド\n    return auth.createUserWithEmailAndPassword(email, password)\n    .then(result => {\n      const user = result.user\n\n      if(user){\n        const uid = user.uid\n        const timestamp = FirebaseTimestamp.now()\n\n        const userInitialDate = {\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        }\n        // createUserWithEmailAndPasswordで作られたアカウント情報を登録する（データベースに登録）\n        db.collection(\"users\").doc(uid).set(userInitialDate)\n          .then(() => {\n            // 登録が完了したらホームへ行く処理\n            dispatch(push(\"/\"))\n          })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}